generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender
  // Relaciones
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  ProductImage ProductImage[]
  OrderItem    OrderItem[]
  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?
  address UserAddress?
  // Relaciones
  Order Order[]

  
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")

 
  
  resources      Int             @default(0)
  buildings      UserBuilding[]
  workerCount    Int             @default(0)
  intance Instance[]
}

model Country {
  id   String @id
  name String
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String
  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Order de compras
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean  @default(false)
  paidAt       DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  tramsactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size
  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String
  userId     String
  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

model Counter {
  id    String  @id @default(uuid())
  count Int     @default(0)
  color String
}

model Message {
  id          String   @id @default(cuid())
  subject     String
  content     String
  createdAt   DateTime @default(now())
  resources   String?
  senderId    String
  receiverId  String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}


// schema.prisma


model Building {
  id             Int             @id @default(autoincrement())
  name           String
  cost           Int
  benefits       String
  unlocked       Boolean         @default(false)
  isResourceExtractor Boolean   @default(false)
  users          UserBuilding[]
}

model UserBuilding {
  id             Int             @id @default(autoincrement())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  buildingId     Int
  building       Building        @relation(fields: [buildingId], references: [id])
  location       Json
  status         String
  workers        Int             @default(0)
  resourceExtracted Int          @default(0)
}

model Instance {
  id             Int             @id @default(autoincrement())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  location       Json
}